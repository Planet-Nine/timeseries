
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '4BF5C41D2907F26B84086E90D65AFFD4'
    
_lr_action_items = {'NUMBER':([10,12,13,14,15,16,20,21,24,26,27,28,29,30,32,36,38,39,40,41,42,43,44,45,46,50,51,53,54,55,57,],[13,-9,-27,-26,13,-28,-8,13,13,13,13,13,-30,13,-11,-13,13,-21,13,13,13,13,-29,-23,-10,-12,-20,-24,-22,-25,-19,]),'RBRACE':([12,13,14,15,16,20,32,36,39,45,46,50,51,53,54,55,57,],[-9,-27,-26,19,-28,-8,-11,-13,-21,-23,-10,-12,-20,-24,-22,-25,-19,]),'LPAREN':([0,1,2,4,7,8,10,12,13,14,15,16,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,50,51,53,54,55,57,58,],[3,-5,3,-4,-2,-3,17,-9,-27,-26,17,-28,-6,-7,-8,17,35,35,17,17,17,17,-30,17,-17,-11,-15,35,-13,35,17,-21,17,17,17,17,-29,-23,-10,-14,-12,-20,-24,-22,-25,-19,-16,]),'INPUT':([17,],[22,]),'OUTPUT':([17,],[23,]),'OP_SUB':([17,],[21,]),'ID':([6,9,10,12,13,14,15,16,17,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,57,58,],[10,11,14,-9,-27,-26,14,-28,24,-8,14,31,31,14,40,14,14,14,-30,14,-17,-11,-15,31,48,-13,31,14,-21,14,14,14,14,-29,-23,-10,-14,-18,56,-12,-20,-24,-22,-25,-19,-16,]),'ASSIGN':([17,],[25,]),'LBRACE':([0,1,2,4,7,8,18,19,],[6,-5,6,-4,-2,-3,-6,-7,]),'STRING':([10,12,13,14,15,16,20,21,24,26,27,28,29,30,32,36,38,39,40,41,42,43,44,45,46,50,51,53,54,55,57,],[16,-9,-27,-26,16,-28,-8,16,16,16,16,16,-30,16,-11,-13,16,-21,16,16,16,16,-29,-23,-10,-12,-20,-24,-22,-25,-19,]),'OP_MUL':([17,],[26,]),'OP_ADD':([17,],[27,]),'RPAREN':([11,13,14,16,22,23,24,29,30,31,32,33,34,36,37,38,39,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,58,],[18,-27,-26,-28,32,36,39,-30,45,-17,-11,-15,46,-13,50,51,-21,53,54,55,-29,-23,-10,-14,-12,-20,57,-24,-22,-25,58,-19,-16,]),'OP_DIV':([17,],[28,]),'$end':([1,2,4,5,7,8,18,19,],[-5,-1,-4,0,-2,-3,-6,-7,]),'IMPORT':([3,],[9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'component':([0,2,],[1,7,]),'statement_list':([0,],[2,]),'import_statement':([0,2,],[4,8,]),'expression':([10,15,21,24,26,27,28,30,38,40,41,42,43,],[12,20,29,29,29,29,29,44,44,52,44,44,44,]),'declaration_list':([22,23,],[34,37,]),'program':([0,],[5,]),'expression_list':([10,],[15,]),'parameter_list':([21,24,26,27,28,],[30,38,41,42,43,]),'declaration':([22,23,34,37,],[33,33,47,47,]),'type':([35,],[49,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',24),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',28),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',32),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',33),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_input','parser.py',41),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_input','parser.py',42),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_output','parser.py',49),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_output','parser.py',50),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',57),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',58),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',66),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',67),
  ('type -> ID','type',1,'p_type','parser.py',74),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assign','parser.py',78),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_funcexpr','parser.py',82),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_funcexpr','parser.py',83),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op','parser.py',90),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op','parser.py',91),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op','parser.py',92),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op','parser.py',93),
  ('expression -> ID','expression',1,'p_exprid','parser.py',97),
  ('expression -> NUMBER','expression',1,'p_literal','parser.py',101),
  ('expression -> STRING','expression',1,'p_literal','parser.py',102),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',106),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',107),
]
